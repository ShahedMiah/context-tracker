{"encoding": "base64", "content": "aW1wb3J0IEJldHRlclNxbGl0ZTMgZnJvbSAnYmV0dGVyLXNxbGl0ZTMnOwppbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7CmltcG9ydCB7IGFwcCB9IGZyb20gJ2VsZWN0cm9uJzsKCmludGVyZmFjZSBTZXNzaW9uIHsKICBhcHBOYW1lOiBzdHJpbmc7CiAgc3RhcnRUaW1lOiBudW1iZXI7CiAgZW5kVGltZTogbnVtYmVyOwogIGR1cmF0aW9uOiBudW1iZXI7Cn0KCmludGVyZmFjZSBDb250ZXh0U3dpdGNoIHsKICBmcm9tQXBwOiBzdHJpbmc7CiAgdG9BcHA6IHN0cmluZzsKICB0aW1lc3RhbXA6IG51bWJlcjsKfQoKaW50ZXJmYWNlIFN3aXRjaENvdW50IHsKICBzd2l0Y2hlczogbnVtYmVyOwp9CgpleHBvcnQgY2xhc3MgRGF0YWJhc2VTZXJ2aWNlIHsKICBwcml2YXRlIGRiOiBCZXR0ZXJTcWxpdGUzLkRhdGFiYXNlOwoKICBjb25zdHJ1Y3RvcigpIHsKICAgIGNvbnN0IGRiUGF0aCA9IGpvaW4oYXBwLmdldFBhdGgoJ3VzZXJEYXRhJyksICdjb250ZXh0LXRyYWNrZXIuZGInKTsKICAgIHRoaXMuZGIgPSBuZXcgQmV0dGVyU3FsaXRlMyhkYlBhdGgpOwogICAgdGhpcy5pbml0aWFsaXplKCk7CiAgfQoKICBwcml2YXRlIGluaXRpYWxpemUoKSB7CiAgICAvLyBDcmVhdGUgc2Vzc2lvbnMgdGFibGUKICAgIHRoaXMuZGIuZXhlYyhgCiAgICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHNlc3Npb25zICgKICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsCiAgICAgICAgYXBwX25hbWUgVEVYVCBOT1QgTlVMTCwKICAgICAgICBzdGFydF90aW1lIElOVEVHRVIgTk9UIE5VTEwsCiAgICAgICAgZW5kX3RpbWUgSU5URUdFUiBOT1QgTlVMTCwKICAgICAgICBkdXJhdGlvbiBJTlRFR0VSIE5PVCBOVUxMCiAgICAgICkKICAgIGApOwoKICAgIC8vIENyZWF0ZSBjb250ZXh0IHN3aXRjaGVzIHRhYmxlCiAgICB0aGlzLmRiLmV4ZWMoYAogICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBjb250ZXh0X3N3aXRjaGVzICgKICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsCiAgICAgICAgZnJvbV9hcHAgVEVYVCBOT1QgTlVMTCwKICAgICAgICB0b19hcHAgVEVYVCBOT1QgTlVMTCwKICAgICAgICB0aW1lc3RhbXAgSU5URUdFUiBOT1QgTlVMTAogICAgICApCiAgICBgKTsKCiAgICAvLyBDcmVhdGUgaW5kZXggZm9yIGZhc3RlciBxdWVyaWVzCiAgICB0aGlzLmRiLmV4ZWMoYAogICAgICBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfc2Vzc2lvbnNfYXBwX25hbWUgT04gc2Vzc2lvbnMoYXBwX25hbWUpOwogICAgICBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfc2Vzc2lvbnNfc3RhcnRfdGltZSBPTiBzZXNzaW9ucyhzdGFydF90aW1lKTsKICAgICAgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X2NvbnRleHRfc3dpdGNoZXNfdGltZXN0YW1wIE9OIGNvbnRleHRfc3dpdGNoZXModGltZXN0YW1wKTsKICAgIGApOwogIH0KCiAgbG9nU2Vzc2lvbihzZXNzaW9uOiBTZXNzaW9uKTogdm9pZCB7CiAgICBjb25zdCBzdG10ID0gdGhpcy5kYi5wcmVwYXJlKGAKICAgICAgSU5TRVJUIElOVE8gc2Vzc2lvbnMgKGFwcF9uYW1lLCBzdGFydF90aW1lLCBlbmRfdGltZSwgZHVyYXRpb24pCiAgICAgIFZBTFVFUyAoQGFwcE5hbWUsIEBzdGFydFRpbWUsIEBlbmRUaW1lLCBAZHVyYXRpb24pCiAgICBgKTsKCiAgICBzdG10LnJ1bihzZXNzaW9uKTsKICB9CgogIGxvZ0NvbnRleHRTd2l0Y2goY29udGV4dFN3aXRjaDogQ29udGV4dFN3aXRjaCk6IHZvaWQgewogICAgY29uc3Qgc3RtdCA9IHRoaXMuZGIucHJlcGFyZShgCiAgICAgIElOU0VSVCBJTlRPIGNvbnRleHRfc3dpdGNoZXMgKGZyb21fYXBwLCB0b19hcHAsIHRpbWVzdGFtcCkKICAgICAgVkFMVUVTIChAZnJvbUFwcCwgQHRvQXBwLCBAdGltZXN0YW1wKQogICAgYCk7CgogICAgc3RtdC5ydW4oY29udGV4dFN3aXRjaCk7CiAgfQoKICBnZXRSZWNlbnRTZXNzaW9ucyhsaW1pdDogbnVtYmVyID0gMTApOiBTZXNzaW9uW10gewogICAgcmV0dXJuIHRoaXMuZGIucHJlcGFyZShgCiAgICAgIFNFTEVDVCAKICAgICAgICBhcHBfbmFtZSBhcyBhcHBOYW1lLAogICAgICAgIHN0YXJ0X3RpbWUgYXMgc3RhcnRUaW1lLAogICAgICAgIGVuZF90aW1lIGFzIGVuZFRpbWUsCiAgICAgICAgZHVyYXRpb24KICAgICAgRlJPTSBzZXNzaW9ucwogICAgICBPUkRFUiBCWSBzdGFydF90aW1lIERFU0MKICAgICAgTElNSVQgPwogICAgYCkuYWxsKGxpbWl0KSBhcyBTZXNzaW9uW107CiAgfQoKICBnZXRDb250ZXh0U3dpdGNoRnJlcXVlbmN5KHRpbWVzcGFuOiBudW1iZXIpOiBTd2l0Y2hDb3VudCB7CiAgICBjb25zdCBzaW5jZSA9IERhdGUubm93KCkgLSB0aW1lc3BhbjsKICAgIHJldHVybiB0aGlzLmRiLnByZXBhcmUoYAogICAgICBTRUxFQ1QgQ09VTlQoKikgYXMgc3dpdGNoZXMKICAgICAgRlJPTSBjb250ZXh0X3N3aXRjaGVzCiAgICAgIFdIRVJFIHRpbWVzdGFtcCA+ID8KICAgIGApLmdldChzaW5jZSkgYXMgU3dpdGNoQ291bnQ7CiAgfQoKICBjbG9zZSgpOiB2b2lkIHsKICAgIHRoaXMuZGIuY2xvc2UoKTsKICB9Cn0="}